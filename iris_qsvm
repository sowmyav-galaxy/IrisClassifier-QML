import numpy as np
from qiskit import Aer
from qiskit.aqua import QuantumInstance
from qiskit.aqua.algorithms import QSVM
from qiskit.aqua.components.multiclass_extensions import OneAgainstRest
from qiskit.circuit.library import ZZFeatureMap
from qiskit.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

np.random.seed(42)

# Load the Iris dataset
iris = load_iris()

# Preprocess the data and labels
X = iris.data
y = iris.target
y = np.where(y == 0, 1, -1)  # Convert labels to binary format

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define the quantum kernel using the Swap Test
def quantum_kernel(x1, x2, depth=1):
    feature_map = ZZFeatureMap(x1[0].num_qubits, reps=depth)
    circuit = feature_map.bind_parameters(x1)  # Apply the feature map to the first data point
    circuit = circuit.evolve(feature_map.bind_parameters(x2))  # Evolve the circuit with the second data point
    return circuit

# Train three binary classifiers, one for each species against the other two
classes = np.unique(y_train)
classifiers = {}
for species in classes:
    binary_labels = np.where(y_train == species, 1, -1)
    qsvm = QSVM(quantum_kernel, OneAgainstRest(), binary_labels)
    backend = Aer.get_backend('qasm_simulator')
    quantum_instance = QuantumInstance(backend, shots=1024)
    result = qsvm.run(quantum_instance)
    classifiers[species] = qsvm

# Evaluate the classifiers on the test set
y_pred = np.zeros_like(y_test)
for species, qsvm in classifiers.items():
    binary_labels = np.where(y_train == species, 1, -1)
    y_pred_binary = np.sign(qsvm.predict(X_test))
    y_pred[np.where(y_pred_binary == 1)] = species

# Compute the accuracy score of the QSVM
accuracy = accuracy_score(y_test, y_pred)

# Print results
print("The number of qubits is", feature_map.num_qubits)
print("The depth of the circuit is", feature_map.depth())
print(f"QSVM accuracy: {accuracy}")

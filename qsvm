import numpy as np
from qiskit import Aer
from qiskit.aqua import QuantumInstance
from qiskit.aqua.algorithms import QSVM
from qiskit.aqua.components.feature_maps import RawFeatureVector
from qiskit.aqua.components.multiclass_extensions import OneAgainstRest
from qiskit.circuit.library import ZZFeatureMap
from qiskit.datasets import load_iris

# Load iris dataset
iris = load_iris()

# Split data into training and testing sets
n = iris["target"].size
idx = np.random.permutation(n)
train_idx, test_idx = idx[:n//2], idx[n//2:]
train_features = iris["data"][train_idx]
train_labels = iris["target"][train_idx]
test_features = iris["data"][test_idx]
test_labels = iris["target"][test_idx]

# Normalize feature vectors
train_features_norm = (train_features - np.mean(train_features, axis=0)) / np.std(train_features, axis=0)
test_features_norm = (test_features - np.mean(train_features, axis=0)) / np.std(train_features, axis=0)

def quantum_kernel(circuit):
    def kernel(x1, x2):
        qc = circuit.bind_parameters({param: val for param, val in zip(circuit.parameters, np.concatenate((x1, x2)))})
        qi = QuantumInstance(Aer.get_backend("statevector_simulator"))
        statevector = qi.execute(qc).get_statevector()
        return np.abs(statevector[-1])**2
    return kernel

feature_map = ZZFeatureMap(feature_dimension=4, reps=1)

qsvm = QSVM(feature_map, quantum_kernel(feature_map), OneAgainstRest())

qsvm.fit(train_features_norm, train_labels)
qsvm_acc = qsvm.score(test_features_norm, test_labels)
print("The number of qubits is:", feature_map.num_qubits)
print("The circuit depth is:", feature_map.depth())
print(f"QSVM accuracy: {qsvm_acc}")
